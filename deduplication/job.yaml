# View the docs https://docs.anyscale.com/reference/job-api#jobconfig.

name: deduplicate-documents

# When empty, use the default image. This can be an Anyscale-provided base image
# like anyscale/ray:2.43.0-slim-py312-cu125, a user-provided base image (provided
# that it meets certain specs), or you can build new images using the Anyscale
# image builder at https://console.anyscale-staging.com/v2/container-images.
# image_uri: anyscale/ray:2.49.2-slim-py312-cu128
containerfile: ./Dockerfile

# When empty, Anyscale will auto-select the instance types. You can also specify
# minimum and maximum resources.
compute_config:
#  head_node:
#    instance_type: n1-highmem-32
  worker_nodes:
    - instance_type: n1-highmem-32
      max_nodes: 500
    - instance_type: n2d-highmem-64
      max_nodes: 500
    - instance_type: n2d-highmem-80
      max_nodes: 500
    - instance_type: n2-highmem-64
      max_nodes: 500
    - instance_type: n2-highmem-80
      max_nodes: 500
    - instance_type: n2-highmem-128
      max_nodes: 500
    - instance_type: c2-standard-4
      max_nodes: 500
    - instance_type: c2-standard-8
      max_nodes: 500
    - instance_type: c2-standard-16
      max_nodes: 500
    - instance_type: c2-standard-30
      max_nodes: 500
    - instance_type: c2-standard-60
      max_nodes: 500
    - instance_type: c2d-highmem-2
      max_nodes: 500
    - instance_type: c2d-highcpu-4
      max_nodes: 500
    - instance_type: c2d-standard-4
      max_nodes: 500
    - instance_type: c2d-highmem-4
      max_nodes: 500
    - instance_type: c2d-highcpu-8
      max_nodes: 500
    - instance_type: c2d-standard-8
      max_nodes: 500
    - instance_type: c2d-highmem-8
      max_nodes: 500
    - instance_type: c3-highcpu-4
      max_nodes: 500
    - instance_type: c3d-highcpu-4
      max_nodes: 500
    - instance_type: c3-standard-4
      max_nodes: 500
    - instance_type: c3d-standard-4
      max_nodes: 500
    - instance_type: c3-highmem-4
      max_nodes: 500
    - instance_type: c3d-highmem-4
      max_nodes: 500
    - instance_type: c3d-highcpu-8
      max_nodes: 500
    - instance_type: c4-highmem-2
      max_nodes: 500
    - instance_type: c4-highcpu-4
      max_nodes: 500
    - instance_type: c4-standard-4
      max_nodes: 500
    - instance_type: c4-highmem-4
      max_nodes: 500
    - instance_type: c4-highcpu-8
      max_nodes: 500
    - instance_type: c4-standard-8
      max_nodes: 500
    - instance_type: c4-highmem-8
      max_nodes: 500
    - instance_type: t2d-standard-4
      max_nodes: 500
    - instance_type: t2d-standard-8
      max_nodes: 500
    - instance_type: t2d-standard-16
      max_nodes: 500
    - instance_type: t2d-standard-32
      max_nodes: 500
    - instance_type: t2d-standard-48
      max_nodes: 500
    - instance_type: t2d-standard-60
      max_nodes: 500
  min_resources:
    CPU: 800
#  max_resources:
#    CPU: 6000

# Path to a local directory or a remote URI to a .zip file (S3, GS, HTTP) that
# will be the working directory for the job. The files in the directory will be
# automatically uploaded to the job environment in Anyscale.
working_dir: .

# When empty, this uses the default Anyscale Cloud in your organization.
cloud:

# The script to run in your job. You can also do "uv run main.py" if you have a
# pyproject.toml file in your working_dir.
entrypoint: |
  python ray_minhash_lsh_datajuicer.py \
    --flavor=datajuicer \
    --documents_path=gs://anyscale-example-datasets/HuggingFaceFW/fineweb-edu/data/ \
    --text_column=text  \
    --threshold=0.7 \
    --ngram_size=5 \
    --output=gs://rkn-scratch-space/dedup/ \
    --limit 1000
#    --limit 10000000000

# If there is an error, do not retry.
max_retries: 0